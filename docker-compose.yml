version: '3.4'

services:
  postgres:
    image: postgres:15
    container_name: pg_container
    restart: unless-stopped
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/.psqlrc:/root/.psqlrc:ro
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/dumps:/dumps
      - ./postgres/log:/root/log:cached
    environment:
      POSTGRES_PASSWORD: asdjnjsd0SAD
      POSTGRES_USER: postgres
      POSTGRES_DB: aviata
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 30s
      retries: 50

  redis:
    container_name: redis
    image: redis:5.0.5
    hostname: redis
    environment:
      - TZ=Asia/Almaty
    ports:
      - "127.0.0.1:6379:6379"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    volumes: ['./:/files']
    env_file:
      - .env
    restart: always
    depends_on:
      - redis
      - postgres


  worker:
    restart: always
    container_name: worker
    build:
      context: .
    command: "celery -A background_jobs.taskmaster worker -l INFO -P eventlet"
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - TZ=Asia/Almaty

  beat:
    restart: always
    container_name: celery_beat
    build:
      context: .
    command: "celery -A background_jobs.scheduler beat -l INFO"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - worker
    environment:
      - TZ=Asia/Almaty

  autoheal:
    restart: always
    image: willfarrell/autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock